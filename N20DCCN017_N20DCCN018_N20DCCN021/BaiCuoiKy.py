# -*- coding: utf-8 -*-
"""RandomForestTrain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iac_8yz6sQ8GFmTRZk4PppbegbKYRALx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load data into a Pandas dataframe
data = pd.read_csv('Hotel Reservations.csv')

d = {}
for u in list(data.columns):
  if(u == 'Booking_ID'):
      continue
  
  print(u, end= ': ')
  d = []
  for v in data[u]:
    d.append(v)
  print(set(d))

# Số lượng cột (features) trong data
print(len(data.columns))

# Convert data which is string type to numeric type
d = {}
for u in list(data.columns):
  if(u == 'Booking_ID' or u == 'arrival_year' or u == 'avg_price_per_room'):
      continue
    
  l = []
  for v in data[u]:
    l.append(v)

  d[u] = set(l)

  i = 0
  for v in d[u]:
    data.replace({u : {v: i}}, inplace = True)
    i = i + 1

# Kiem tra lai cac gia tri sau khi covert
for u in list(data.columns):
  if(u == 'Booking_ID'):
      continue
  
  print(u, end= ': ')
  d = []
  for v in data[u]:
    d.append(v)
  print(set(d))

# Tạo dữ liệu train model
X = data.drop(columns=['booking_status', 'Booking_ID'])
y = data['booking_status'].values.reshape(-1, 1)

print(X.shape)
print(y.shape)

# Tạo tập dữ liệu train và tập dữ liệu test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Xây dựng Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay

# n_estimators: số lượng cây dùng để dự đoán trong Random Forest
# criterion: phép đo để lựa chọn thuộc tính cho node N ('gini', 'entropy', 'log_loss')
# max_depth: chiều cao tối đa của cây trong rừng
# min_samples_split: số lượng samples tối thiểu cần để tạo nút cắt
# min_samples_leaf:  số lượng samples tối thiểu cần để tạo nút lá
rf = RandomForestClassifier(n_estimators=100, criterion='entropy', max_depth=17, min_samples_split=2, min_samples_leaf=1) 
rf.fit(X_train, y_train)

# Minh hoạ 1 decision tree trong random forest
from sklearn.tree import export_graphviz
import graphviz
from sklearn import tree
trees = rf.estimators_[0] # Lấy cây đầu tiên trong rừng
dot_data = tree.export_graphviz(trees, 
                                feature_names=list(data.columns[1:-1]),  
                                class_names=['Not_Canceled','Canceled'],
                                filled=True,
                                max_depth=2)

graph = graphviz.Source(dot_data, format="png")
graph

# Dự đoán thử tập dữ liệu test
y_predict = rf.predict(X_test)

# Thống kê số lượng đoán đúng và đoán sai
cm = confusion_matrix(y_test, y_predict)

# Kiểm tra số lượng đoán chính xác thông qua hình ảnh
cm_display = ConfusionMatrixDisplay(cm).plot()

# Tính toán tỉ lệ đoán đúng
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_predict)
print("Accuracy:", accuracy)

# Dự đoán riêng customer qua Predict.csv
customers = pd.read_csv('Predicts.csv')

booking_id = list(customers['Booking_ID'])

test = customers.drop(columns=['booking_status', 'Booking_ID'])
d = {}
for u in list(test.columns):
  if(u == 'arrival_year' or u == 'avg_price_per_room'):
      continue
    
  l = []
  for v in test[u]:
    l.append(v)

  d[u] = set(l)

  i = 0
  for v in d[u]:
    test.replace({u : {v: i}}, inplace = True)
    i = i + 1

test = rf.predict(test)

# "booking_status": "Not_Canceled": 0, "Canceled": 1
res = dict(zip(booking_id, test))
print(res)